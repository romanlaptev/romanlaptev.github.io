webapp DB (webapp)
  объект, объединяющий контроллер, модель, представление

необходимые функции:

  app (контроллер)
*при необходимости отобразить на странице блок обращается за данными к модели,
полученные данные передает на вывод в представление

- загрузка данных таблиц СМС в *память или в indexedDB, webSQL
(входные данные в форматах *XML, JSON, CSV)

- конвертировать входные данные во внутренний формат хранения данных: JSON
(сделать для всех форматов *XML, JSON, CSV)

- обновление существующих данных 


  webapp.db (модель)
*- выполнение поисковых запросов на SQL и сохранение их памяти
если для выполнения запроса необходимо дополнительно загрузить файлы,
модель обращается к контроллеру
(
*использовать простые запросы к одной таблице или добавить поддержку сложных, составных запросов???
)

  - добавить использование схемы при парсинге XML-документа
(для форматов JSON, CSV необходимо вручную составлять схему данных...)  


  webapp.draw (представление)
- на основе результатов запроса генерирование html-блоков
(модуль получает данные из модели) 
настройки блоков также хранятся в модели, в соотв. таблице
модуль выводит переданные данные в указанный блок разметки - аргументы data, id
*- считать соответв. шаблон блока (скрипт типа template), 
заполнить данными и вставить в разметку, туда, где определен этот шаблон
(нужно отделять разметку страницы от шаблонов!!!!, шаблоны в отдельном файле...)


- необходимо определять время генерации блока, *выполнения запроса
*- необходима возможность загружать ресурсы (БД) со стороннего домена через AJAX

*- доработать функцию _query для обработки запросов с подзапросами нескольких уровней вложенности
происходит неверное определение baseQuery в момент подстановки в основной запрос
результатов subQuery. 
В качестве baseQuery всегда используется самый первый родительский запрос options["queryObj"],
хотя нужно менять baseQuery в зависимости от subQuery. 
baseQuery содержит  subQuery (один или несколько) на одном уровне вложенности

- выяснить, где в БД находится информация о блоках страницы
SELECT * FROM `blocks` WHERE `theme` = 'pushbutton' AND `status` =1

------- SELECT * FROM `blocks` WHERE `theme` = 'pushbutton'
bid	252
module	views
delta	info_termins_style-block_1
theme	pushbutton
region	left
status	1

--------- SELECT * FROM `views_view`
vid	22
name	info_termins_style
base_table	term_data


-------- SELECT * FROM `views_display` WHERE `vid` =22
vid	22
id	block_1

vid	22
id	default
display_options 	
a:14:{
	s:13:"relationships";
	a:1:{
			s:6:"parent";
			a:3:{
					s:2:"id";
					s:6:"parent";
					s:5:"table";
					s:14:"term_hierarchy";
					s:5:"field";
					s:6:"parent";
				}
		}
и т.д, т.е. параметры представления info_termins_style

- реализована видимость блоков в зависимости от параметра opt["visibility"] = "список страниц для вывода блока"
- доработать, при выводе на страницу контента страниц (node) нужно применять шаблон node.tpl с возможностью его переопределения
